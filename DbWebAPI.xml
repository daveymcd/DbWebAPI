<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DbWebAPI</name>
    </assembly>
    <members>
        <member name="T:DbWebAPI.Controllers.HomeController">
            <summary>
            
                DbWebAPI.Controllers.HomeController - http://localhost:5001;http://localhost:5001/Home
                
                Home Page. Allows exploration of DbWebApi services via Swagger/Views/Pages etc.
                
            </summary>
        </member>
        <member name="M:DbWebAPI.Controllers.HomeController.#ctor(Microsoft.Extensions.Logging.ILogger{DbWebAPI.Controllers.HomeController})">
            <summary>Home View Logging</summary>
            <param name="logger"></param>
        </member>
        <member name="M:DbWebAPI.Controllers.HomeController.Index">
            <summary>API Landing Page</summary>
        </member>
        <member name="M:DbWebAPI.Controllers.HomeController.Privacy">
            <summary>API Privacy Page</summary>
        </member>
        <member name="M:DbWebAPI.Controllers.HomeController.Error">
            <summary>API Error Page</summary>
        </member>
        <member name="T:DbWebAPI.Controllers.SCxItemsController">
            <summary> 
            
                DbWebApi.Controllers.SCxItemsController - Database Web Open API Controller
                
                This controller exposes the web API CRUD endpoints for mobile app to access the SCx 
                Documents database.
                
            </summary>
            <remarks>
            
                The Database holds various food industry regulatory documents, required by the UK  
                governments 'Food Standards Agency', to be archived and held by catering companies 
                as a record of their compliance with UK food hygiene regulation.
                
                * SCxItem.cs is the document archive Class, holding the Food Hygiene Document data. 
                  Each Documents is TimeStamped and Typed. 
                  
                * SCxItemDto is the document archive DTO Class, holding a document subset of...
                    Id 
                    TimeStamp 
                    Type 
                    Dept
                  
            </remarks>
        </member>
        <member name="P:DbWebAPI.Controllers.SCxItemsController.ArchiveItemsDto">
            <summary>Document Archive List returned to caller</summary>
        </member>
        <member name="P:DbWebAPI.Controllers.SCxItemsController.SCxItemsDto">
            <summary>DTO subset of all document data</summary>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.#ctor(DbWebAPI.Models.SCxItemContext)">
            <summary>
                DbWebAPI.Controllers.SCxItemContext
                This method gets called by the runtime and configures the Database context.
            </summary>
            <param name="context">Database set</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.GetSCxItemsAsync(DbWebAPI.Models.SCxItemDto)">
            <summary>
                DbWebAPI.Controllers.GetSCxItemsAsync
                GET: SCxItems/GetSCxItemsAsync 
                HTTP get all documents request endpoint. 
                This method responds with all SCx Document data.
            </summary>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.GetSCxItemAsync(DbWebAPI.Models.SCxItemDto)">
            <summary>
                DbWebAPI.Controllers.GetSCxItemAsync (override)
                GET: SCxItems/GetSCxItemAsync 
                HTTP get by id request endpoint. 
                This method responds with single SCx Document data.
            </summary>
            <param name="scxItemDto">Document Dto</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.GetSCxItemsSelectAsync(DbWebAPI.Models.SCxItemDto)">
            <param name="scxItemDto">Document selection criteria</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.GetSCxItemsSelectDtoAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
                DbWebAPI.Controllers.GetSCxItemsSelectDtoAsync
                GET: SCxItems/GetSCxItemsSelectDtoAsync
                HTTP get subset of document data by selection request endpoint. 
                This method responds with a Data Transfer Object subset of selected SCx Document data.
            </summary>
            <param name="SearchFromTimeStamp">Search Start Date/Time</param>
            <param name="SearchToTimeStamp">Search End Date/Time</param>
            <param name="Type">Document Type</param>
            <param name="Dept">Department</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.GetArchiveDtoAsync(DbWebAPI.Models.SCxItemDto,System.String)">
            <summary>
                DbWebAPI.Controllers.GetArchiveDtoAsync
                GET: SCxItems/GetArchiveDtoAsync
                HTTP get Archive 'Data Transfer Object' request endpoint. 
                This method responds with a selected subset of document archival data.
                
                The DTO is used to transfer the archive date based structure (year/month/day folders), 
                without any document detail (used by calling program to create a folder based display of archive).
            </summary>
            <remarks>
                This Endpoint retrieves the minimum amount of document data to allow the App to display the document folder structure.
                This results in the lightest payload possible over HTTP:
                
                    Period = Years  - results in one archive DTO for each year of archival material
                    Period = Months - results in one archive DTO for each month of archival material for the year specified by sCxItem.TimeStamp
                    Period = Days   - results in one archive DTO for each day of archival material for the year and month specified by sCxItem.TimeStamp
                    Period = Day    - results in one archive DTO for each department's archival material for the year, month and day specified by sCxItem.TimeStamp
                    Period = All    - results in all of the above
                    
            </remarks>
            <param name="scxItemDto">Document buffer contains additional selection critera (Search Start Date/Time, Dept). Default is Today.</param>
            <param name="Period">Period data should be returned for - 'All', 'Years', 'Months'. 'Days' or 'Day'. Default is "All"</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PutSC1ItemAsync(DbWebAPI.Models.SC1Item)">
            <summary>
                DbWebAPI.Controllers.PutSC1ItemAsync
                PUT: SCxItem/PutSC1ItemAsync
                HTTP Put by Id request endpoint. 
                This method responds by updating a single Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PutSC2ItemAsync(DbWebAPI.Models.SC2Item)">
            <summary>
                DbWebAPI.Controllers.PutSC2ItemAsync
                PUT: SCxItem/PutSC2ItemAsync
                HTTP Put by Id request endpoint. 
                This method responds by updating a single Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PutSC3ItemAsync(DbWebAPI.Models.SC3Item)">
            <summary>
                DbWebAPI.Controllers.PutSC3ItemAsync
                PUT: SCxItem/PutSC3ItemAsync
                HTTP Put by Id request endpoint. 
                This method responds by updating a single Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PutSC4ItemAsync(DbWebAPI.Models.SC4Item)">
            <summary>
                DbWebAPI.Controllers.PutSC4ItemAsync
                PUT: SCxItem/PutSC4ItemAsync
                HTTP Put by Id request endpoint. 
                This method responds by updating a single Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PutSC9ItemAsync(DbWebAPI.Models.SC9Item)">
            <summary>
                DbWebAPI.Controllers.PutSC9ItemAsync
                PUT: SCxItem/PutSC9ItemAsync
                HTTP Put by Id request endpoint. 
                This method responds by updating a single Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PostSC1ItemAsync(DbWebAPI.Models.SC1Item)">
            <summary>
                DbWebAPI.Controllers.PostSC1ItemAsync
                POST: SCxItems/PostSC1ItemAsync
                HTTP Post SC1 data request endpoint. 
                This method responds by creating a new SCx Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PostSC2ItemAsync(DbWebAPI.Models.SC2Item)">
            <summary>
                DbWebAPI.Controllers.PostSC2ItemAsync (override)
                POST: SCxItems/PostSC2ItemAsync
                HTTP Post SC2 data request endpoint. 
                This method responds by creating a new SCx Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PostSC3ItemAsync(DbWebAPI.Models.SC3Item)">
            <summary>
                DbWebAPI.Controllers.PostSC3ItemAsync (override)
                POST: SCxItems/PostSC3ItemAsync
                HTTP Post SC3 data request endpoint. 
                This method responds by creating a new SCx Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PostSC4ItemAsync(DbWebAPI.Models.SC4Item)">
            <summary>
                DbWebAPI.Controllers.PostSC4ItemAsync (override)
                POST: SCxItems/PostSC4ItemAsync
                HTTP Post SC4 data request endpoint. 
                This method responds by creating a new SCx Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.PostSC9ItemAsync(DbWebAPI.Models.SC9Item)">
            <summary>
                DbWebAPI.Controllers.PostSC9ItemAsync (override)
                POST: SCxItems/PostSC9ItemAsync
                HTTP Post SC9 data request endpoint. 
                This method responds by creating a new SCx Document.
            </summary>
            <param name="item">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.DeleteSCxItemAsync(DbWebAPI.Models.SCxItemDto)">
            <summary>
                DbWebAPI.Controllers.DeleteSCxItemAsync
                DELETE: SCxItems/DeleteSCxItemAsync/5
                HTTP Delete by id request endpoint. 
                This method responds by deleting a single SCx Document.
            </summary>
            <param name="scxItemDto">Document DTO</param>
        </member>
        <member name="T:DbWebAPI.Controllers.SCxItemsController.Grouping`2">
            <summary>
                DbWebAPI.Controllers.Grouping
                Grouping Class - Grouping fuctionallity for sort
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Grouping - Group Documents together.
            </summary>
            <param name="key">Sort Key</param>
            <param name="items">Document list</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxItemsController.SqlLoadSCxItemsAsync(DbWebAPI.Models.SCxItemContext,DbWebAPI.Models.SCxItemDto)">
            <summary>
                DbWebAPI.Controllers.SqlLoadSCxItemsAsync
                Loads all Document data from the selected document table (SC1 - SC9).
                Called by SCxItemsController.GetSCxItemsSelectAsync 
            </summary>
            <remarks>
                Uses a SQL select query to select rows from the specified table (SC1 - SC9). 
                    
                The ArchiveItemsDto data that will be sorted into 
                year/month/day/dept/Type.
            </remarks>
            <param name="_context">Database set</param>
            <param name="scxItemDto">SCxItem DTO used as parameters for selection criteria</param>
        </member>
        <member name="T:DbWebAPI.Controllers.SCxViewController">
            <summary>
            
                DbWebAPI.Controllers.SCxViewController - MVC View Controller
            
                This controller exposes the View pages CRUD endpoints for SCx Document Views. 
                
            </summary>
            <remarks>
                
                The Database holds various food industry regulatory documents, required by the UK  
                governments 'Food Standards Agency', to be archived and held by catering companies 
                as a record of their compliance with UK food hygiene regulation.
                
                * SCxItem.cs is the document archive Class, holding the Food Hygiene Document data. 
                  Each Documents is TimeStamped and Typed. 
                
            </remarks>>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.#ctor(DbWebAPI.Models.SCxItemContext)">
            <summary>
                This method gets called by the runtime and configures the Database context.
            </summary>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.Index">
            <summary>
                GET: SCxItems - Get all. 
                This method returns all SCx Document data to the Index View.
            </summary>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.IndexDto">
            <summary>
                GET: SCxItemsDto - Get all. 
                This method returns Document DTO data (SC1 - SC9) to the Index View.
            </summary>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.Details(System.Guid)">
            <summary>
                GET: SCxItems/Details/5 - Get by Id.
                This method returns a single SCx Document to the View.
            </summary>
            <param name="id">Document Id</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.Create">
            <summary>
                GET: SCxItems/Create - Create new Document.
                This method returns an initialised SCx Document shell to Create View
            </summary>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.CreateConfirmed(DbWebAPI.Models.SCxItem)">
            <summary>
                POST: SCxItems/Create - Create new Document.
                This method creates a new SCx Document.
            </summary>
            <param name="sCxItem">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.Edit(System.Guid)">
            <summary>
                GET: SCxItems/Edit/5 - Update Document.
                This method returns the Document to the Edit View.
            </summary>
            <param name="id">Document Id</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.EditUpdate(System.Guid,DbWebAPI.Models.SCxItem)">
            <summary>
                POST: SCxItems/EditUpdate/5 - Update Document.
                This method updates a single SCx Document.
            </summary>
            <param name="id">Document Id</param>
            <param name="sCxItem">Document</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.Delete(System.Guid)">
            <summary>
                GET: SCxItems/Delete/5 - Delete Document.
                This method returns the Document to the Delete View.
            </summary>
            <param name="id">Document Id</param>
        </member>
        <member name="M:DbWebAPI.Controllers.SCxViewController.DeleteConfirmed(System.Guid)">
            <summary>
                POST: SCxItems/DeleteConfirmed/5 - Delete Document
                This method deletes a single SCx Document.
            </summary>
            <param name="id">Document Id</param>
        </member>
        <member name="T:DbWebAPI.Data.DbInitializer">
            <summary>
            
                DbWebAPI.Data - SCx Test Data Class
                
                Setup the SCxDb Database with test data.
            </summary>
            <remarks>
            
                Called from DbWebApi.Program.cs.CreateDbIfNotExists(IHost)
                to setup the SQL Server database context.
                
            </remarks>
        </member>
        <member name="M:DbWebAPI.Data.DbInitializer.Initialize(DbWebAPI.Models.SCxItemContext)">
            <summary>
                DbWebAPI.Data.DbInitializer.Initialise
                
                Called by DbWebAPI.Program
                Invoke DbWebAPI.Models.OnModelCreating to associate Tables.
                and add test archive data to SCxDb database 
            </summary>
            <param name="context">DbContext service for SQL Server database</param>
        </member>
        <member name="M:DbWebAPI.Data.DbInitializer.AddThisMonthsSCxData(DbWebAPI.Models.SCxItemContext,System.Nullable{System.Double})">
            <summary>
                DbWebAPI.Data.DbInitializer.AddThisMonthsSCxData
                
                Called by DbWebAPI.Data.DbInitializer.Initialize
                Add a months worth of test archive data to SCxDb database 
                Method can be repeated any number of times to create years 
                worth of data.    
            </summary>
            <param name="context">DbContext Service for SQL Server Database</param>
            <param name="monthOffset">month offset from current month, to setup data for</param>
            <returns></returns>
        </member>
        <member name="M:DbWebAPI.Data.DbInitializer.AddThisWeeksSCxData(DbWebAPI.Models.SCxItemContext,System.Nullable{System.Double})">
            <summary> 
                 DbWebAPI.Data.DbInitializer.AddThisWeeksSCxData
                 
                 Called by DbWebAPI.Data.DbInitializer.AddThisMonthsSCxData
                 to setup 'Last week of the month' test archive data 
            </summary>
            <param name="context">DbContext service for SQL Server database</param>
            <param name="monthOffset">Month offset (from current Month) to set data up for</param>
        </member>
        <member name="M:DbWebAPI.Data.DbInitializer.AddTodaysSCxData(DbWebAPI.Models.SCxItemContext,System.Nullable{System.Double})">
            <summary> 
                 DbWebAPI.Data.DbInitializer.AddTodaysSCxData
                 
                 Called by DbWebAPI.Data.DbInitialiser.Initialize
                 to setup 'Last day of the month' test archive data 
            </summary>
            <param name="context">DbContext service for SQL Server database</param>
            <param name="monthOffset">Month offset (from current Month) to set data up for</param>
        </member>
        <member name="M:DbWebAPI.Data.DbInitializer.SqlLoadItemsDtoAsync(DbWebAPI.Models.SCxItemContext)">
            <summary>
                DbWebAPI.Controllers.SqlLoadItemsDtoAsync
                Loads a 'Data Transfer Object' subset of all Document data.
                Called by SCxItemsController.GetArchiveDtoAsync 
            </summary>
            <remarks>
                Uses a SQL sub-select query to merge all the document data 
                (SC1 - SC9) into a 'ArchiveItemsDto' which consists of 
                the following columns...
                
                    Id
                    TimeStamp
                    Type
                    Dept. 
                    
                The ArchiveItemsDto data that will be sorted into 
                year/month/day/dept/Type and is ultimately passed back to  
                the calling APP to create the archive folders layout.
            </remarks>
            <param name="_context">Database set</param>
        </member>
        <member name="T:DbWebAPI.Helpers.DropList">
            <summary> General Helper Class </summary>
        </member>
        <member name="T:DbWebAPI.Helpers.DropList.DropListItem">
            <summary>
                DbWebApi.Helpers.DropListUBD
                Class for Drop Down List key pairings.
            </summary>
        </member>
        <member name="P:DbWebAPI.Helpers.DropList.DropListItem.Id">
            <summary>Document Type Id</summary>
        </member>
        <member name="P:DbWebAPI.Helpers.DropList.DropListItem.Text">
            <summary>Description of Document Type</summary>
        </member>
        <member name="F:DbWebAPI.Helpers.DropList.DropListUBD">
            <summary>
                DbWebApi.Helpers.DropListUBD
                Drop Down List for Use-By-Date Indicator (not-applicable/OK/Out-Of-Date)
            </summary>
            <example>
                @Html.DropDownListFor(model => model.sCxItem.CheckUBD, new SelectList(Helpers.DropListUBD, "Id", "Text"))
            </example>
        </member>
        <member name="F:DbWebAPI.Helpers.DropList.DropListSCx">
            <summary>
                DbWebApi.Helpers.DropListUBD
                Drop Down List for Document Type (SC1: - SC9:)
            </summary>
            <example>
                @Html.DropDownListFor(model => model.sCxItem.Type, new SelectList(Helpers.DropListSCx, "Id", "Text"))
            </example>
        </member>
        <member name="T:DbWebAPI.Helpers.GetReflectedPropertyVal">
            <summary>
                DbWebApi.Helpers.GetReflectedPropertyValue(object, string)
            </summary>
        </member>
        <member name="M:DbWebAPI.Helpers.GetReflectedPropertyVal.GetReflectedPropertyValue(System.Object,System.String)">
            <summary>
                Get the value of an object property from a complex structure
            </summary>
            <example>
                var reflectedValue = Helpers.GetReflectedPropertyValue(sCxItem, "TimeStamp");
            </example>
            <param name="_object">structure</param>
            <param name="_property">Property to get</param>
        </member>
        <member name="T:DbWebAPI.Helpers.MessageHandler">
            <summary>
            
                DbWebApi.Helpers.MessageHandler - Output Message methods
                
            </summary>
        </member>
        <member name="M:DbWebAPI.Helpers.MessageHandler.MessageLog(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            
                Helpers.MessageHandler.MessageLog(string, string)
                Outputs a message to the Windows EventViewer or Nlog (default).
                
            </summary>
            <remarks>
                
                Nlog writes messages to a flat file in the project directory 'logs'...
                
                    ~\Visual Studio 2019\Projects\DbWebAPI\logs\DbWebAPIlog-'DateTime.log
                
            </remarks>
            <example>
                Helpers.MessageLog("Exception Name or Message", "Trace", "Nlog");
            </example>
            <param name="exceptionMsg">Exeption Name</param>
            <param name="logService">Nlog or EventLog</param>
            <param name="messageType">Debug/Info/Log/Trace/Warn/Error or Fatal</param>
            <param name="memberName">Calling Method Name</param>
            <param name="fileName">File that Method is defined in</param>
            <param name="lineNumber">File Line Number call made from</param>
        </member>
        <member name="M:DbWebAPI.Helpers.MessageHandler.DebugLog(System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            
                Helpers.MessageHandler.DebugLog(string, bool, string, string, int)
                Trace the calling sequence for a method.
                
            </summary>
            <remarks>
                
                Loops through the call stack of the current thread, tracing the methods 
                calling sequence. Logs to output window only in debug mode
                
            </remarks>
            <example>
                MessageHandler.DebugLog("Starting", true);
            </example>
            <param name="msgBody">Main Message</param>
            <param name="fullTrace">Full Trace History of just calling method name</param>
            <param name="memberName">Calling Method Name</param>
            <param name="fileName">File that Method is defined in</param>
            <param name="lineNumber">File Line Number call made from</param>
        </member>
        <member name="T:DbWebAPI.Models.ErrorViewModel">
            <summary>
            DbWebApi.Models.ErrorViewModel
            </summary>
        </member>
        <member name="P:DbWebAPI.Models.ErrorViewModel.RequestId">
            <summary>Request Id</summary>
        </member>
        <member name="P:DbWebAPI.Models.ErrorViewModel.ShowRequestId">
            <summary>Show/NoShow</summary>
        </member>
        <member name="T:DbWebAPI.Models.SCxItemDto">
            <summary>
            
                DbWebAPI.Models.SCxItem - SCx Documents Data
                
                SCxItem is a class holding Food Hygiene Documents data. The Documents are 'TimeStamp' ordered 
                and the document type is defined by the 'Type' attribute which ranges from SC1: to SC9:. 
            
            </summary>
            <remarks>
            
                These are regulatory Documents required by the government Food Standards Agency to be archived and 
                held by catering companies as a record of their compliance with UK food hygiene regulation.
                
            </remarks>>
            <summary>
            
                DbWebAPI.Models.SCxItemDto - SCx Documents DTO Data Model
                
            </summary>
            <remarks>
            
                Data Transfer Object for SCxItem. Used by the mobile app to
                scaffold the folder and document structure for the archive screen.
                It returns only minimal document data.
                
            </remarks>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemDto.Id">
            <summary>Guid Unique Id</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemDto.TimeStamp">
            <summary>Date of transaction</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemDto.Type">
            <summary>Document type SC1 - SC9</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemDto.Dept">
            <summary>Catering Department (Kitchen, Prep-area, Stores etc)</summary>
        </member>
        <member name="M:DbWebAPI.Models.SCxItemDto.Initialise(DbWebAPI.Models.SCxItemDto)">
            <summary>
                DbWebAPI.Models.SCxItem.Initialise();
                On Creation of an SCxItem, any uninitialised data will be given default value.
            </summary>
            <param name="item">Document to initialise</param>
        </member>
        <member name="T:DbWebAPI.Models.SCxSearchCriteria">
            <summary>
            
                Search class for List of SCxItem.
                
            </summary>
            <remarks>
            
                These properties are all the possible search criteria for the document archive (SCx).
                The class is used as by a search method to retirve a selection of documents.
                All the properties are optional.
                
                Note: Using seperate fields for Date and Time allow for greater compatablity across browsers
                    
            </remarks>        
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.FromDate">
            <summary>Search start date</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.FromTime">
            <summary>Search start time</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.ToDate">
            <summary>Search end date</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.ToTime">
            <summary>Search end time</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.Type">
            <summary>Document Type (SC1 - SC9)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.Dept">
            <summary>Catering Department. Kitchen, Prep-area, Stores etc</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.Food">
            <summary>Food Item or Ingredient</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.Supplier">
            <summary>Stock Supplier Name</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.CheckUBD">
            <summary>Use-By-Date indicator (not-applicable/checked/Expired)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxSearchCriteria.SignOff">
            <summary>Supervisor sign-off of completed Document</summary>
        </member>
        <member name="M:DbWebAPI.Models.SCxSearchCriteria.SCxSearch(System.Collections.Generic.IList{DbWebAPI.Models.SCxItem})">
            <summary>
            
                DbWebAPI.Model.SCxSearchCriteria.SCxSearch() - search method for list of SCx documents
            
            </summary>
            <remarks>
                
                This is a search method of the SCxSearchCriteria class with access to the bound search 
                criteria entered by the user (this = SCxSearchParams). 
                
                The method uses the search critera entered by the user (SCxSearchParams) to select a 
                subset of document records from the database to pass back to the client (sCxItems).
            
                The following SCxSearchCriteria class values are setup (optionaly) by the client...
                
                    this.FromDate   - Search start date.
                    this.FromTime   - Search start time.
                    this.ToDate     - Search end date.
                    this.ToTime     - Search end time.
                    this.Type       - SCx document type (SC1 - SC9).
                    this.Dept       - Catering department
                    this.Supplier   - Stock supplier
                    this.CheckUBD   - Use-By-Date status (n/a, OK or Expired)
                    this.SignOff    - Name of supervisor who signed-off of the completed document
            
                Note: 
                    *   Using seperate fields for Date and Time, allows for greater compatablity across browsers.
                    *   If the user does not input a value then the coresponding property is null.
                    *   if no date or time is entered, the appropriate default DateTime.MinValue / DateTime.MaxValue is used (ie all documents).  
                    *   If time is entered without the accompanying date, the date defaults to today or FromDate, whichever is appropriate. 
                    *   If a date is entered without an accompanying time, the default 'search from' time is 00:00.00, the default 'search to' time is 23:59.59.
                    *   SCxSearchCriteria DateTime values are nullable so the DateTime members have to be exposed via '.Value' property.
            
            </remarks>
            <example>
                sCxItems = searchParams.SCxSearch(await _context.SCxItems.ToListAsync());
            </example>
            <param name="sCxSearchItems">List of documents to search</param>
        </member>
        <member name="T:DbWebAPI.Models.SC1Item">
             <summary>
             
                 DbWebAPI.Models.SCxItem - SCx Documents Data Model
                 Food Standards Agency 'Safe Catering' Regulatory Food Monitoring Records (SC1-SC9).
                 
             </summary>
             <remarks>
            
                 Id          - Guid unique Key. 
                 TimeStamp   - Documents transaction date/time stamp used to order the document archive.
                 Type        - Safe Catering Document Type...
            
                     SC1: Deliveries In      – Food Delivery Record. To record the monitoring of incoming deliveries (high risk, ready-to-eat food only).
                     SC2: Chiller Checks     – Fridge/Cold room/Display Chiller Temperature records. To record the monitoring of the chill units, 
                                               refrigerator's, cold units (and the function of freezer's).
                     SC3: Cooking Log        – Cooking/Cooling/Reheating Records. To record the monitoring of cooking, cooling and reheating temperatures.
                     SC4: Hot-Holding        – Hot Hold/Display Records. To record hot holding temperatures of food.
                     SC5: Hygiene Inspection – Hygiene Inspection Checklist. To record managers/supervisors checks of premises.
                     SC6: Hygiene Training   – Hygiene Training Records. To record training of staff.
                     SC7: Fitness To Work    – Fitness to Work Assessment Form. To record assessment of staff fitness to work.
                     SC8: All-In-One Form    – All-in-one Record. An alternative to SC1-4 (not used).
                     SC9: Deliveries Out     – Customer Delivery Record. To record monitoring of food deliveries out to customers.
                     COP: Opening Checks     - Daily opening checks by supervisor.
                     CCL: Closing Checks     - Daily closing checks by supervisor.
             
                 Dept        - Catering department (Kitchen, Prep-area, Stores etc).
                 Food        - Food type or ingredient.
                 Supplier    - Stock Supplier Name.
                 CheckUBD    - Use-By-Date indicator (not-applicable/checked/out-of-date)
                 Temperature - Food Temperature in Celsius
                 Comment     - General comment box
                 SignOff     - Manger sign-off of completed Document
                 
                 
             </remarks>
            
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.Id">
            <summary>
                Guid Unique Key
            </summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.TimeStamp">
            <summary>Date/Time Document Created</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.Type">
            <summary>SCx Document Type (SC1 - SC9)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.Dept">
            <summary>Catering department (Kitchen, Prep-area, Stores etc)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.Food">
            <summary>Food type</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.Supplier">
            <summary>Stock Supplier Name</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.CheckUBD">
            <summary>Use-By-Date indicator (not-applicable/checked-OK/expired)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.Temperature">
            <summary>Food Temperature in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.Comment">
            <summary>General comment box</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.Sign">
            <summary>Staff signiture of Document amendment</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.SignOff">
            <summary>Manger Check sign-off of completed Document</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC1Item.CheckDate">
            <summary>Date/Time Manager Signed-Off the Document</summary>
        </member>
        <member name="M:DbWebAPI.Models.SC1Item.Initialise(DbWebAPI.Models.SC1Item)">
            <summary>
                DbWebAPI.Models.SC1Item.Initialise();
                On Creation of a Document, any uninitialised data will be given default value.
            </summary>
            <param name="item">Document to initialise</param>
        </member>
        <member name="T:DbWebAPI.Models.SC2Item">
            <summary>
                SC2: Chiller Checks
            </summary>
        </member>
        <member name="P:DbWebAPI.Models.SC2Item.Id">
            <summary>Guid Unique Key</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC2Item.TimeStamp">
            <summary>Date/Time Document Created</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC2Item.Type">
            <summary>SCx Document Type (SC1 - SC9)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC2Item.Dept">
            <summary>Catering department (Kitchen, Prep-area, Stores etc)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC2Item.Temperature">
            <summary>Food Temperature in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SC2Item.Comment">
            <summary>General comment box</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC2Item.Sign">
            <summary>Staff signiture of Document amendment</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC2Item.SignOff">
            <summary>Manger Check sign-off of completed Document</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC2Item.CheckDate">
            <summary>Date/Time Manager Signed-Off the Document</summary>
        </member>
        <member name="M:DbWebAPI.Models.SC2Item.Initialise(DbWebAPI.Models.SC2Item)">
            <summary>
                DbWebAPI.Models.SC2Item.Initialise();
                On Creation of a Document, any uninitialised data will be given default value.
            </summary>
            <param name="item">Document to initialise</param>
        </member>
        <member name="T:DbWebAPI.Models.SC3Item">
            <summary>
                SC3: Cooking Log
            </summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.Id">
            <summary>Guid Unique Key</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.TimeStamp">
            <summary>Date/Time Document Created</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.Type">
            <summary>SCx Document Type (SC1 - SC9)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.Dept">
            <summary>Catering department (Kitchen, Prep-area, Stores etc)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.Food">
            <summary>Food type</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.CookStart">
            <summary>Date/Time Cooking began</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.CookEnd">
            <summary>Date/Time Cooking Ended</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.CookTemp">
            <summary>Food Temperature in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.CookSign">
            <summary>Staff Signature</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.CoolStart">
            <summary>Date/Time Into Cooler</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.CoolTemp">
            <summary>Food Temperature in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.CoolSign">
            <summary>Staff Signature</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.ReheatStart">
            <summary>Date/Time Reheating began</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.ReheatTemp">
            <summary>Food Temperature in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.ReheatSign">
            <summary>Staff Signature</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.Comment">
            <summary>General comment box</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.SignOff">
            <summary>Manger Check sign-off of completed Document</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC3Item.CheckDate">
            <summary>Date/Time Manager Signed-Off the Document</summary>
        </member>
        <member name="M:DbWebAPI.Models.SC3Item.Initialise(DbWebAPI.Models.SC3Item)">
            <summary>
                DbWebAPI.Models.SC3Item.Initialise();
                On Creation of a Document, any uninitialised data will be given default value.
            </summary>
            <param name="item">Document to initialise</param>
        </member>
        <member name="T:DbWebAPI.Models.SC4Item">
            <summary>
               SC4: Hot Holding
            </summary>
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.Id">
            <summary>Guid Unique Key</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.TimeStamp">
            <summary>Date/Time Document Created</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.Type">
            <summary>SCx Document Type (SC1 - SC9)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.Dept">
            <summary>Catering department (Kitchen, Prep-area, Stores etc)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.Food">
            <summary>Food type</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.HoldTemp2">
            <summary>Food Temperature after 2hrs in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.HoldTemp4">
            <summary>Food Temperature after 4hrs in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.HoldTemp6">
            <summary>Food Temperature after 6hrs in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.Comment">
            <summary>General comment box</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.Sign">
            <summary>Staff signiture of Document amendment</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.SignOff">
            <summary>Manger Check sign-off of completed Document</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC4Item.CheckDate">
            <summary>Date/Time Manager Signed-Off the Document</summary>
        </member>
        <member name="M:DbWebAPI.Models.SC4Item.Initialise(DbWebAPI.Models.SC4Item)">
            <summary>
                DbWebAPI.Models.SC4Item.Initialise();
                On Creation of a Document, any uninitialised data will be given default value.
            </summary>
            <param name="item">Document to initialise</param>
        </member>
        <member name="T:DbWebAPI.Models.SC9Item">
            <summary>
               SC9: Deliveries Out
            </summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.Id">
            <summary>Guid Unique Key</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.TimeStamp">
            <summary>Date/Time Document Created</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.Type">
            <summary>SCx Document Type (SC1 - SC9)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.Dept">
            <summary>Catering department (Kitchen, Prep-area, Stores etc)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.Food">
            <summary>Food type</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.Quantity">
            <summary>Quantity Delivered</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.Batch">
            <summary>Stock Batch Number</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.CheckUBD">
            <summary>Use-By-Date indicator (not-applicable/checked-OK/expired)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.CustName">
            <summary>Customer Name</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.CustAddr">
            <summary>Customer Address</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.Temperature">
            <summary>Food Temperature in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.CheckRawRTE">
            <summary>Seperation of Raw or Ready-To-Eat foods boolean</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.Comment">
            <summary>General comment box</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.Sign">
            <summary>Staff signiture of Document amendment</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.SignOff">
            <summary>Manger Check sign-off of completed Document</summary>
        </member>
        <member name="P:DbWebAPI.Models.SC9Item.CheckDate">
            <summary>Date/Time Manager Signed-Off the Document</summary>
        </member>
        <member name="M:DbWebAPI.Models.SC9Item.Initialise(DbWebAPI.Models.SC9Item)">
            <summary>
                DbWebAPI.Models.SC9Item.Initialise();
                On Creation of a Document, any uninitialised data will be given default value.
            </summary>
            <param name="item">Document to initialise</param>
        </member>
        <member name="T:DbWebAPI.Models.SCxItem">
            <summary>
                Redundant
            </summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.Id">
            <summary>Guid Unique Key</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.TimeStamp">
            <summary>Date/Time Document Created</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.Type">
            <summary>SCx Document Type (SC1: - SC9:)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.Dept">
            <summary>Catering department (Kitchen, Prep-area, Stores etc)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.Food">
            <summary>Food type</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.Supplier">
            <summary>Stock Supplier Name</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.CheckUBD">
            <summary>Use-By-Date indicator (not-applicable/checked-OK/expired)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.Temperature">
            <summary>Food Temperature in Celsius</summary>  
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.Comment">
            <summary>General comment box</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.Sign">
            <summary>Staff signiture of Document amendment</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.SignOff">
            <summary>Manger sign-off of completed Document</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItem.CheckDate">
            <summary>Date/Time Manager Signed-Off the Document</summary>
        </member>
        <member name="T:DbWebAPI.Models.SCxItem.ApiClient">
            <summary>
            
                DbWebAPI.Models.SCxItem.ApiClient - Xamarin App client interface.
                Hand coded version. A NSwag generated version is available in project folder DbWebAPI.IClient.
                
            </summary>
        </member>
        <member name="M:DbWebAPI.Models.SCxItem.ApiClient.GetClient">
            <summary>
                
                DbWebAPI.Models.SCxItem.ApiClient.GetClient() - Get HTTP client and authorisation key.
                Login and Get autorisation from the API 
                
            *** OpenAPI! NOT IMPLEMENTED. Debugging from android emulator...
            
                Connectivity.ConnectivityChanged += Connectivity_ConnectivityChanged;
                ...
                void Connectivity_ConnectivityChanged(object sender, ConnectivityChangedEventArgs e)
                { // Check for internet access and warn if not connected...
                    if (Connectivity.NetworkAccess == NetworkAccess.None) { ... }
                    else if (Connectivity.NetworkAccess == NetworkAccess.Internet) { ... }
                    else if (Connectivity.NetworkAccess == NetworkAccess.ConstrainedInternet) { ... }
                    else if (Connectivity.NetworkAccess == NetworkAccess.Local) { ... }
                    else if (Connectivity.NetworkAccess == NetworkAccess.Unknown) { ... }
                    bool NetAccess = e.IsConnected;
                }
                
                IOS:
                To change the default HttpClient handler for Xamarin.iOS, open iOS project's properties. Under the iOS Build tab, there's an HttpClient Implementation option. If you set this option to NSUrlSession, HttpClient uses the native iOS handler without passing it into the constructor.
                To opt out of App Transport Security, add a new key to your Info.plist file called NSAppTransportSecurity. Inside that dictionary, add another key called NSExceptionDomains.
                Local debugging - The application must opt-out of ATS specifying a minimum of NSAllowsLocalNetworking
            
                ANDROID:
                To change the default HttpClient handler for Xamarin.Android, open the Android project's properties. Under the Android Options tab, click the Advanced button at the bottom. In the Advanced Android Options dialog, there's an SSL/TLS implementation option.Setting this value to Native TLS 1.2+ makes HttpClient default to using the message handler.
                To permit cleartext traffic you will need to create a network security configuration. First, you will create a new xml file under Resources/xml named network_security_config.xml. Inside of this file you will add a network-security-config with domain-config settings. The following configuration will enable cleartext traffic to be allowed for a specific domain and for an IP address:
                public static string BaseAddress = DeviceInfo.Platform == DevicePlatform.Android? "``http://10.0.2.2:5000``" : "``http://localhost:5000``";
                
            </summary>
        </member>
        <member name="M:DbWebAPI.Models.SCxItem.ApiClient.AddAsync(DbWebAPI.Models.SCxItem)">
            <summary>
                
                DbWebAPI.Models.SCxItem.ApiClient.AddAsync(item) - Create a new document.
                HTTP POST operation on SCxItemsController for endpoint "Home/SCxItem/PostSCxItem
                
            </summary>
            <param name="item">Document to create</param>
        </member>
        <member name="M:DbWebAPI.Models.SCxItem.ApiClient.GetAsync(System.Guid)">
            <summary>
                
                DbWebAPI.Models.SCxItem.ApiClient.GetAsync(id) - Get a document by Id
                HTTP GET operation on SCxItemsController for endpoint "Home/SCxItem/GetSCxItem/{id}
                
            </summary>
            <remarks>
            
                Not passing the 'id' parameter will cause all SCx Documents to be received.
            
            </remarks>
            <param name="id">Document Guid to get</param>
        </member>
        <member name="M:DbWebAPI.Models.SCxItem.ApiClient.SelectDtoAsync(DbWebAPI.Models.SCxSearchCriteria)">
            <summary>
                
                DbWebAPI.Models.SCxItem.ApiClient.SelectDtoAsync(SCxSearchCriteria) - Select a subset of documents in shortend Data Transfer Object form
                HTTP GET operation on SCxItemsController for endpoint "Home/SCxItem/GetSCxItemsSelectDto
                
            </summary>
            <param name="SCxSearchItems">Search criteria for item selection</param>
        </member>
        <member name="M:DbWebAPI.Models.SCxItem.ApiClient.PutAsync(DbWebAPI.Models.SCxItem)">
            <summary>
                
                DbWebAPI.Models.SCxItem.ApiClient.PutAsync(item) - Update a document.
                HTTP PUT operation on SCxItemsController for endpoint "Home/SCxItem/PutSCxItem/{id}
                
            </summary>
            <param name="item">Document to update</param>
        </member>
        <member name="M:DbWebAPI.Models.SCxItem.ApiClient.DeleteAsync(DbWebAPI.Models.SCxItem)">
            <summary>
                
                DbWebAPI.Models.SCxItem.ApiClient.DeleteAsync(id) - Delete a document by Id
                HTTP DELETE operation on SCxItemsController for endpoint "Home/SCxItem/DeleteSCxItem/{id}
            </summary>
            <param name="item">Document to delete</param>
        </member>
        <member name="M:DbWebAPI.Models.SCxItem.Initialise(DbWebAPI.Models.SCxItem)">
            <summary>
                DbWebAPI.Models.SCxItem.Initialise();
                On Creation of an SCxItem, any uninitialised data will be given default value.
            </summary>
            <param name="item">Document to initialise</param>
        </member>
        <member name="M:DbWebAPI.Models.SCxItem.AddThisMonthsSCxData(System.Nullable{System.Double})">
            <summary>Add test archive data to database </summary>
        </member>
        <member name="M:DbWebAPI.Models.SCxItem.AddThisWeeksSCxData(System.Nullable{System.Double})">
            <summary> Add 'This weeks' test archive data to database </summary>
        </member>
        <member name="T:DbWebAPI.Models.SCxItemContext">
            <summary>
                DbWebAPI.Models.SCxItemContext - DbContext
                
                Setup the SQL Server database context for the API.
                Called from DbWebApi.Startup.cs
            </summary>
        </member>
        <member name="M:DbWebAPI.Models.SCxItemContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{DbWebAPI.Models.SCxItemContext})">
            <summary>
                DbWebAPI.Models.SCxItemContext - Set Database context for SCxItem
            </summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemContext.SCxItems">
            <summary>DbWebAPI.Models.SCxItems - Document List (IList of SCxItem)</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemContext.SC1Items">
            <summary>SC1: Deliveries In Documents</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemContext.SC2Items">
            <summary>SC2: Cooler Checks Documents</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemContext.SC3Items">
            <summary>SC3: Cooking Log Documents</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemContext.SC4Items">
            <summary>SC4: Hot Holding Documents</summary>
        </member>
        <member name="P:DbWebAPI.Models.SCxItemContext.SC9Items">
            <summary>SC9: Deliveries Out Documents</summary>
        </member>
        <member name="M:DbWebAPI.Models.SCxItemContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
                DbWebAPI.Models.OnModelCreating (override)
                
                Invoked by EnsureCreated() call in DbWebAPI.Data.DbInitializer.Initialize()
                Equate SCx Item to its Database table.
            </summary>
            <param name="modelBuilder">Context Model</param>
        </member>
        <member name="T:DbWebAPI.IndexModel">
            <summary>
            
                DbWebAPI.Models.Index.cshtml.cs - SCx Documents View
                
                Main Landing page for Razor Pages. initially displays all documents in table form.
                
            </summary>
            <remarks>
            
                Index.cshtml displays a tabular list of documents and allows the client to perform 
                the following actions via the pages clickables...
                
                    Search  - Search the document archive for a subset of data based on 
                              date-Range/Document-Type/Department etc. 
                    Sort    - Sort the table by column.
                    New     - Create a new document.
                    Edit    - Click on an individual row to invoke _popupEdit modal where 
                              a document can be Updated, Deleted or Copied. The client can 
                              also navigate the documents without leaving the modal via
                              the Next and previous buttons.
                              
                    Crud operations do not have their own page (as per the VS boilerplate). 
                    most functionallity is provided by the Edit modal which allows the client 
                    to navigate the document whilst making amendments.
                    
                    Edit, Create and Search operations are provided from the modal by the 
                    relevant partial view.
                
            </remarks>>
        </member>
        <member name="P:DbWebAPI.IndexModel.sCxItems">
            <summary>Document List</summary>
        </member>
        <member name="P:DbWebAPI.IndexModel.sCxItem">
            <summary>Document</summary>
        </member>
        <member name="P:DbWebAPI.IndexModel.SCxSearchParams">
            <summary>Document Search Criteria</summary>
        </member>
        <member name="M:DbWebAPI.IndexModel.#ctor(DbWebAPI.Models.SCxItemContext)">
            <summary>Set Razor Pages Databas Context</summary>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnGetAsync">
            <summary>
                DbWebAPI.IndexModel.OnGetAsync() -  Entry point.
                On 1st use, all document records are retrieved for display.
            </summary>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnPostSortAsync(System.String)">
            <summary>
            
                DbWebAPI.IndexModel.OnPostSortAsync("column") - Sort Handler
                Sort handler POST end point for '/Index?handler=sort'
            
                Sorts a table of data by column when a column heading is clicked.
            
            </summary>
            <remarks>
            
                Each column heading is wrapped in a form statement in which
                the method type is set to post and the asp-page-handler is set to 'sort'. 
                when clicked, invokes this handler OnPost'Sort'Async (inserts 'Sort' into OnPostAsync).
            
                The method is passed the name of the column which identifies the column to sort on.
            
            </remarks>
            <example>
                <form asp-page-handler="sort" asp-route-column="Supplier" method="post">
                    <input type = "hidden" />
                    <input type="submit" value="Supplier"/>
                </form>
            </example>
            <param name="column">Column name to sort on</param>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnGetSearch">
            <summary>
            
                DbWebAPI.IndexModel.OnGetSearch() - Search Handler (data entry)
                Search Handler. GET End point for '/Index?handler=search'
                
            </summary>
            <remarks>
            
                This handler is invoked by the Search button in Index.cshtml.
                Returns the modal _PopupSearch.cshtml for user input
                
            </remarks>
            <example>
                <form asp-page-handler="search" method="get">
                    <input type="hidden" />
                    <input id="modal" class="search" type="submit" value="search" data-toggle="modal" data-target="#popup-modal" data-url="@Url.Page('Index', 'search')" />
                </form>
            </example>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnPostSearchAsync">
            <summary>
            
                DbWebAPI.IndexModel.OnPostSearchAsync() - Search Handler - (retrieve list)
                Search handler - POST end point for '/Index?handler=search'
            
            </summary>
            <remarks>
            
                The view uses a Search button to invoke a JavaScript function which loads a popup 
                (_popupSearch.cshtml) and prompts the user to enter the search criteria.
                
                the popup specifies a Search button with the method type set to 'post'
                and the asp-page-handler set to 'search'. When clicked this OnPost'Search'Async handler
                is invoked (injects 'Search' into OnPostAsync).
            
                This method then calls the ScxSearchCriteria search method SCxSearch(), which uses 
                the bound search criteria (SCxSearchParams) entered by the user, to return a subset 
                of documents from SCxItems.
            
            </remarks>
            <example>
                <form asp-page-handler="search" method="post">
                    <input type="hidden" />
                    <input class="search" type="submit" value="Search" data-toggle="modal" data-target="#popup-modal" data-url="@Url.Page('Index', 'search')" />
                </form>
            </example>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnGetNew">
            <summary>
            
                DbWebAPI.IndexModel.OnGetNew() - Create New Document Handler (data entry)
                Search Handler. GET End point for '/Index?handler=new'
                
            </summary>
            <remarks>
            
                This handler is invoked by the Create button ('+') in Index.cshtml.
                Returns the modal _PopupNew.cshtml for user input
                
            </remarks>
            <example>
                <form asp-page-handler="new" method="get">
                    <input type="hidden" />
                    <input id="modal" class="create" type="submit" value="create" data-toggle="modal" data-target="#popup-modal" data-url="@Url.Page('Index', 'new')" />
                </form>
            </example>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnGetCreateAsync">
            <summary>
            
                DbWebAPI.IndexModel.OnGetCreateAsync() Create New Document Handler (database update)
                Create handler - Get end point for '/Index?hanler=Create'
            
            </summary>
            <remarks>
            
                The view uses a '+' button to invoke a JavaScript function which loads the popup
                (_PopupNew.cshtml) and prompts the user to enter document data. 
                
                the popup specifies a Create button with the method type set to 'get'
                and the asp-page-handler set to 'create'. When clicked this OnGet'Create'Async handler
                is invoked (injects 'Create' into OnGetAsync).
            
                This method then creates a new document in SCxItems and returns a partialView
                to the modal, ready for the next create.
            
            </remarks>
            <example>
                <form asp-page-handler="create" method="get">
                    <input type="hidden" />
                    <input class="create" type="submit" value="create" data-toggle="modal" data-target="#popup-modal" data-url="@Url.Page('Index', 'create')" />
                </form>
            </example>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnGetEditAsync(System.Nullable{System.Guid})">
            <summary>
            
                DbWebAPI.IndexModel.OnGetEdit() - Edit Handler (data entry)
                Edit Handler. GET End point for '/Index?hanler=edit'
                
            </summary>
            <remarks>
            
                This handler is invoked by clicking a row in Index.cshtml.
                
                This handler then returns the modal _PopupSearch.cshtml which 
                displays the details of the document clicked on, for user amendment.
                
            </remarks>
            <example>
                <form asp-page-handler="edit" asp-route-id="@item.Id" method="get">
                    <input type="hidden" />
                    <input id="modal" class="edit" type="submit" value="edit" data-toggle="modal" data-target="#popup-modal" data-url="@Url.Page('Index', 'edit')" />
                </form>
            </example>
            <param name="id">Document Id</param>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnGetNextAsync(System.Guid,System.String)">
            <summary>
            
                DbWebAPI.IndexModel.OnGetNextAsync() - Get Nex/Prev Document
                Next Handler. GET End point for '/Index?hanler=next'
                
            </summary>
            <remarks>
            
                This handler is invoked by the Previous or Next document button in _popupEdit.cshtml.
                It uses the cmd parameter to set sCxItem to the next or previous document index of sCxItems. 
                
            </remarks>
            <example>
                <form asp-page-handler="next" asp-route-id="@item.Id" asp-route-cmd="next" method="get">
                    <input type="hidden" />
                    <input id="GetNewModalContent" type="submit" value=">"  />
                </form>
            </example>
            <param name="id">Document Id</param>
            <param name="cmd">Next or Prev Document</param>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnGetSaveAsync">
            <summary>
            
                DbWebAPI.IndexModel.OnGetSaveAsync() - Update Handler (database update)
                Edit handler - POST end point for '/Index?hanler=Edit'
            
            </summary>
            <remarks>
            
                The user clicks a row in the view to invoke a JavaScript function which 
                loads a popup (_popupEdit.cshtml) and prompts the user to Amend the document. 
                
                the popup specifies a Save button with the method type set to 'get'
                When clicked, JavaScript invokes this handler, passing the Model (sCxItem) as 'data:'.
            
                This handler then updates the changed document data in SCxItems and returns 
                the same document back to the JavaScript as a partialView.
            
            </remarks>
            <example>
                <form asp-page-handler="save" asp-route-id="@item" method="get">
                    <input type="hidden" />
                    <input id="GetNewModalContent" type="submit" value="Save" />
                </form>
            </example>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnGetDeleteAsync(System.Guid)">
            <summary>
            
                DbWebAPI.IndexModel.OnGetDeleteAsync() - Document Delete Handler (database update)
                Delete handler - GET end point for '/Index?hanler=Delete'
            
            </summary>
            <remarks>
            
                The user clicks a row in the view to invoke a JavaScript function which loads a popup 
                (_popupEdit.cshtml) prompts the user to enter Amend a document. 
                
                the popup specifies a Delete button with the method type set to 'get'
                and the asp-page-handler set to 'delete'. When clicked this OnGet'Delete'Async handler
                is invoked (injects 'Delete' into OnGetAsync).
            
                This method then deletes the current document data in SCxItems, and returns the 
                next record to the modal as a partialView for display.
            
            </remarks>
            <example>
                <button asp-page-handler="delete" asp-route-id="@Model.Id" method="get">
                    <input id="GetNewModalContent" type="submit" value="delete" />
                </button>
            </example>
            <param name="id">Document Id</param>
        </member>
        <member name="M:DbWebAPI.IndexModel.OnGetCopyAsync(System.Guid)">
            <summary>
            
                DbWebAPI.IndexModel.OnGetCopyAsync() - Copy Document Handler (database update)
                Copy handler - GET end point for '/Index?hanler=Copy'
            
            </summary>
            <remarks>
            
                The view uses a Edit button to invoke a JavaScript function which loads a popup
                (_popupEdit.cshtml) and prompts the user to enter Amend a document. 
                
                the popup specifies a Copy button with the method type set to 'get'
                and the asp-page-handler set to 'copy'. When clicked this OnGet'Copy'Async handler
                is invoked (injects 'Copy' into OnGetAsync).
            
                This method then copies the document data with a new Guid and TimeStamp  
                and creates a new document in SCxItems. The new document partial view is 
                returned to the modal for display.
            
            </remarks>
            <example>
                <button asp-page-handler="copy" method="get" asp-route-id="@Model.Id" >
                    <input type="hidden" />
                    <input id="GetNewModalContent" value="copy" />
                </button>
            </example>
            <param name="id">Document Id</param>
        </member>
        <member name="T:DbWebAPI.Program">
             <summary>
             
                 DbWebApi v1.2 - Database Web Service for archival of regulatory food hygiene documents.
             
             </summary>
             <remarks>
             
                 V1.0 2021-04-10 D.McDonald 
                 Creation of Web API controller for use by Xamarin Mobile App 'FSAdiary'. 
                 
                 V1.1 2021-04-14 D.McDonald
                 Added simple View controller for browser access.
                 
                 V1.2 2021-04-17 D.McDonald
                 Added Razor Pages with sort, search and modal CRUD facility.
             
                 The Database holds various food industry regulatory documents. The governments   
                 'Food Standards Agency' require these documents to be archived and held by 
                 catering companies as a record of their compliance with UK food hygiene regulation...
                 
                     SC1: Deliveries In      – Food Delivery Record. To record the monitoring of incoming deliveries (high risk, ready-to-eat food only).
                     SC2: Chiller Checks     – Fridge/Cold room/Display Chiller Temperature records. To record the monitoring of the chill units, 
                                               refrigerator's, cold units (and the function of freezer's).
                     SC3: Cooking Log        – Cooking/Cooling/Reheating Records. To record the monitoring of cooking, cooling and reheating temperatures.
                     SC4: Hot-Holding        – Hot Hold/Display Records. To record hot holding temperatures of food.
                     SC5: Hygiene Inspection – Hygiene Inspection Checklist. To record managers/supervisors checks of premises.
                     SC6: Hygiene Training   – Hygiene Training Records. To record training of staff.
                     SC7: Fitness To Work    – Fitness to Work Assessment Form. To record assessment of staff fitness to work.
                     SC8: All-In-One Form    – All-in-one Record. An alternative to SC1-4 (not used).
                     SC9: Deliveries Out     – Customer Delivery Record. To record monitoring of food deliveries out to customers.
                     COP: Opening Checks     - Daily opening checks by supervisor.
                     CCL: Closing Checks     - Daily closing checks by supervisor.
                 
                 The Xamarin Mobile Application 'FSAdiary' manages the regulatory reqiurements of the business
                 and uses this REST Api to store and retrieve the users documents.
                 
                 * SCxItem.cs is the document archive Class, holding the Food Hygiene Document data. 
                   Each Documents is TimeStamped and Typed. 
                 
                 * SCxItemController.cs is The Api's endpoints controller and services the CRUD requests.
                
                 "http://.../Home" is the API's landing page and offers access to Swagger, MVC Views and
                 Razor Pages. The latter 2 options were added to extend the web services offered by the API. 
                 
                 
                 For Open API Web Service please see...
            
                    DbWebAPI.Controllers.SCxItemsController.cs
                    DbWebAPI.Models.SCxItems.cs
            
                For MVC View Web Service (Views project folder) please see...
            
                    DbWebAPI.Views.SCxView.Index.cshtml
                    DbWebAPI.Controllers.SCxViewController.cs
                    DbWebAPI.Models.SCxItems.cs
            
                For Razor Page Web Service (Pages project folder) please see...
            
                    DbWebAPI.Pages.Index.cshtml.cs
                    DbWebAPI.Pages.Shared._popupEdit.cshtml
                    DbWebAPI.Models.SCxItems.cs
                    
             
                 VS Log Files - C:\Users\dave\AppData\Local\Temp\visualstudio-js-debugger.txt
                 also check %APPDATA%/
             
             </remarks>>
        </member>
        <member name="P:DbWebAPI.Program.SCxItemsDto">
            <summary>DTO subset of all document data</summary>
        </member>
        <member name="M:DbWebAPI.Program.Main(System.String[])">
            <summary>API Entry Point</summary>
        </member>
        <member name="M:DbWebAPI.Program.CreateHostBuilder(System.String[])">
            <summary>Startup Web Service</summary>
        </member>
        <member name="T:DbWebAPI.Startup">
            <summary>
            
                DbWebApi.Startup - Configure API services.
            
            </summary>
            <remarks>
            
                2021-04-10 - Created. 
                2021-04-11 - Implemented Swashbuckle for Swagger testing (replacing Postman).
                2021-04-12 - Switched from Swashbuckle to Nswag.
                2021-04-17 - Configured Razor Pages.
            
            </remarks>
        </member>
        <member name="M:DbWebAPI.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>Setup Process called from Main()</summary>
        </member>
        <member name="P:DbWebAPI.Startup.Configuration">
            <summary> API startup Configuration </summary>
        </member>
        <member name="M:DbWebAPI.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary> This method gets called by the runtime. Use this method to add services to the container.</summary>
        </member>
        <member name="M:DbWebAPI.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary> This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</summary>
        </member>
        <member name="M:IClient.IIClient.GetSCxItemsAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get All SCx Documents</summary>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IIClient.GetSCxItemAsync(System.Guid,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get Single SCx Document By Guid</summary>
            <param name="id">Document Id</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IIClient.GetSCxItemSelectAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Select SCx Documents</summary>
            <param name="searchFromTimeStamp">Search start Date/Time</param>
            <param name="searchToTimeStamp">Search end Date/Time</param>
            <param name="type">Document Type</param>
            <param name="dept">Catering Department</param>
            <param name="supplier">Supplier Name</param>
            <param name="checkUBD">Use-By-Date status</param>
            <param name="signOff">Supervisor sign off</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IIClient.GetSCxItemSelectDtoAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Select DTO Subset Of Data From SCx Documents</summary>
            <param name="searchFromTimeStamp">Search Start Date/Time</param>
            <param name="searchToTimeStamp">Search End Date/Time</param>
            <param name="type">Document Type</param>
            <param name="dept">Department</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IIClient.PutSCxItemAsync(System.Nullable{System.Guid},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update SCx Document</summary>
            <param name="id">Guid Unique Key</param>
            <param name="timeStamp">Date/Time Document Created</param>
            <param name="type">SCx Document Type (SC1: - SC9:)</param>
            <param name="dept">Catering department (Kitchen, Prep-area, Stores etc)</param>
            <param name="food">Food type</param>
            <param name="supplier">SC1: Stock Supplier Name</param>
            <param name="checkUBD">SC1: Use-By-Date indicator (not-applicable/checked-OK/expired)</param>
            <param name="temperature">Food Temperature in Celsius</param>
            <param name="comment">General comment box</param>
            <param name="signOff">Manger sign-off of completed Document</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IIClient.PostSCxItemAsync(System.Nullable{System.Guid},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create New SCx Document</summary>
            <param name="id">Guid Unique Key</param>
            <param name="timeStamp">Date/Time Document Created</param>
            <param name="type">SCx Document Type (SC1: - SC9:)</param>
            <param name="dept">Catering department (Kitchen, Prep-area, Stores etc)</param>
            <param name="food">Food type</param>
            <param name="supplier">SC1: Stock Supplier Name</param>
            <param name="checkUBD">SC1: Use-By-Date indicator (not-applicable/checked-OK/expired)</param>
            <param name="temperature">Food Temperature in Celsius</param>
            <param name="comment">General comment box</param>
            <param name="signOff">Manger sign-off of completed Document</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IIClient.DeleteSCxItemAsync(System.Guid,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete SCx Document By Guid</summary>
            <param name="id">Document Id</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IClient.GetSCxItemsAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get All SCx Documents</summary>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IClient.GetSCxItemAsync(System.Guid,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get Single SCx Document By Guid</summary>
            <param name="id">Document Id</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IClient.GetSCxItemSelectAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Select SCx Documents</summary>
            <param name="searchFromTimeStamp">Search start Date/Time</param>
            <param name="searchToTimeStamp">Search end Date/Time</param>
            <param name="type">Document Type</param>
            <param name="dept">Catering Department</param>
            <param name="supplier">Supplier Name</param>
            <param name="checkUBD">Use-By-Date status</param>
            <param name="signOff">Supervisor sign off</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IClient.GetSCxItemSelectDtoAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Select DTO Subset Of Data From SCx Documents</summary>
            <param name="searchFromTimeStamp">Search Start Date/Time</param>
            <param name="searchToTimeStamp">Search End Date/Time</param>
            <param name="type">Document Type</param>
            <param name="dept">Department</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IClient.PutSCxItemAsync(System.Nullable{System.Guid},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Update SCx Document</summary>
            <param name="id">Guid Unique Key</param>
            <param name="timeStamp">Date/Time Document Created</param>
            <param name="type">SCx Document Type (SC1: - SC9:)</param>
            <param name="dept">Catering department (Kitchen, Prep-area, Stores etc)</param>
            <param name="food">Food type</param>
            <param name="supplier">SC1: Stock Supplier Name</param>
            <param name="checkUBD">SC1: Use-By-Date indicator (not-applicable/checked-OK/expired)</param>
            <param name="temperature">Food Temperature in Celsius</param>
            <param name="comment">General comment box</param>
            <param name="signOff">Manger sign-off of completed Document</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IClient.PostSCxItemAsync(System.Nullable{System.Guid},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Create New SCx Document</summary>
            <param name="id">Guid Unique Key</param>
            <param name="timeStamp">Date/Time Document Created</param>
            <param name="type">SCx Document Type (SC1: - SC9:)</param>
            <param name="dept">Catering department (Kitchen, Prep-area, Stores etc)</param>
            <param name="food">Food type</param>
            <param name="supplier">SC1: Stock Supplier Name</param>
            <param name="checkUBD">SC1: Use-By-Date indicator (not-applicable/checked-OK/expired)</param>
            <param name="temperature">Food Temperature in Celsius</param>
            <param name="comment">General comment box</param>
            <param name="signOff">Manger sign-off of completed Document</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:IClient.IClient.DeleteSCxItemAsync(System.Guid,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete SCx Document By Guid</summary>
            <param name="id">Document Id</param>
            <exception cref="T:IClient.ApiException">A server side error occurred.</exception>
        </member>
        <member name="T:IClient.SCxItem">
            <summary>    DbWebAPI.Models.SCxItem - SCx Documents Data Model
                Food Standards Agency 'Safe Catering' Regulatory Food Monitoring Records (SC1-SC9).
                </summary>
        </member>
        <member name="P:IClient.SCxItem.Id">
            <summary>Guid Unique Key</summary>
        </member>
        <member name="P:IClient.SCxItem.TimeStamp">
            <summary>Date/Time Document Created</summary>
        </member>
        <member name="P:IClient.SCxItem.Type">
            <summary>SCx Document Type (SC1: - SC9:)</summary>
        </member>
        <member name="P:IClient.SCxItem.Dept">
            <summary>Catering department (Kitchen, Prep-area, Stores etc)</summary>
        </member>
        <member name="P:IClient.SCxItem.Food">
            <summary>Food type</summary>
        </member>
        <member name="P:IClient.SCxItem.Supplier">
            <summary>SC1: Stock Supplier Name</summary>
        </member>
        <member name="P:IClient.SCxItem.CheckUBD">
            <summary>SC1: Use-By-Date indicator (not-applicable/checked-OK/expired)</summary>
        </member>
        <member name="P:IClient.SCxItem.Temperature">
            <summary>Food Temperature in Celsius</summary>
        </member>
        <member name="P:IClient.SCxItem.Comment">
            <summary>General comment box</summary>
        </member>
        <member name="P:IClient.SCxItem.SignOff">
            <summary>Manger sign-off of completed Document</summary>
        </member>
    </members>
</doc>
